{
  "name": "paratask",
  "version": "1.6.2",
  "author": {
    "name": "Ivan Dimanov",
    "email": "mail@idimanov.com"
  },
  "description": "Paratask is a tool that will execute your JavaScript code in parallel using the full potential of multi-process programming. In contrast to asynchronous task management, Paratask will create a child Node.js process in which your task will 'live'.",
  "contributors": [
    {
      "name": "Ivan Dimanov",
      "email": "mail@idimanov.com"
    }
  ],
  "scripts": {
    "start": "node ./lib/index.js",
    "test": "grunt nodeunit"
  },
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/IvanDimanov/paratask.git"
  },
  "devDependencies": {
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "parallel",
    "process",
    "control-flow"
  ],
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Paratask - Node.js Parallel Tasks Manager\n[![Build Status](https://secure.travis-ci.org/IvanDimanov/paratask.png?branch=master)](http://travis-ci.org/IvanDimanov/paratask)\n[![NPM version](https://badge.fury.io/js/paratask.png)](http://badge.fury.io/js/paratask)\n\nParatask is a tool that will execute your Node.js code in __parallel__ using the full potential of multi-process programming.\nIn contrast to asynchronous task management, Paratask will create a child Node.js process in which your task function will 'live'.\n\n__Warning:__ This means that your task function will be able to get only a non-functional context dependencies. More into in the examples below.\n\n\n## Install\nYou can install Paratask with the Node Package Manager:\n```shell\nnpm install paratask\n```\nor by getting it from [this repo](https://github.com/IvanDimanov/paratask).\n\n## Dependencies\nParatask uses only general Node.js modules that do not need additional installation: `fs`, `child_process`, and `domain`.\n\n\n## Examples\nBoth `task_1` and `task_2` will fork a Node.js process,\nexecute their functions and when both call `callback()`,\nthe final error state and results will be printed in the console.\n\n__Warning:__ `context` property can only be a valid `JSON.parse()` value (i.e. no functions allowed).\n\n```javascript\nvar paratask = require('paratask');\n\nvar task_1 = {\n  fork: function (callback) {\n    // Some calculation using the 'count' context var\n    var result = count * 10;\n    callback(null, result);\n  },\n  context: {\n    count: 10\n  }\n};\n\nvar task_2 = {\n  fork: function (callback) {\n    // Some calculation using the 'count' context var\n    var result = count * 10;\n    callback(null, result);\n  },\n  context: {\n    count: 20\n  }\n};\n\nparatask([ task_1, task_2 ], function (error, results) {\n  console.log( error   );  // null\n  console.log( results );  // [100, 200], 1st task result will be always the 1st in the results array even if completed last\n});\n```\n\n\nBoth `task_1` and `task_2` will fork a Node.js process but\nfrom the moment when `task_2` call `callback('Error message')`\nboth processes will be killed and the final callback will be executed,\nprinting the 1st occurred error and the results array in the moment of error occurrence.\n\n__Note:__ `context` property is optional.\n\n```javascript\nvar paratask = require('paratask');\n\nvar task_1 = {\n  fork: function (callback) {\n    var\n    count     = 100000,\n    factorial = 1;\n\n    while (--count) factorial *= count;\n\n    callback(null, factorial);\n  }\n};\n\nvar task_2 = {\n  fork: function (callback) {\n    callback('Error message');\n  }\n};\n\nparatask([ task_1, task_2 ], function (error, results) {\n  console.log( error   );  // 'Error message'\n  console.log( results );  // [], the results array may not have any data saved since one task error will kill all forked tasks\n});\n```\n\n\n## Comparison tests\nA palette of comparison tests between `paratask()`, `async.parallel()`, and `process.nextTick()` are available in `./tests` folder.\n\n### Heavy calculation test:\n\n```shell\nnode tests/async_heavy_test.js\n```\n```shell\nnode tests/process_nextTick_heavy_test.js\n```\n```shell\nnode tests/paratask_heavy_test.js\n```\n\n\n## Conclusion\nParatask is great when you have several time consuming task functions with few external dependencies.\nIn such cases, multi-processing is the best approach.\nWhen you want to manage several relevantly quick functions with asynchronous logic, [async](https://github.com/caolan/async) will handle it with beauty.",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/IvanDimanov/paratask/issues"
  },
  "_id": "paratask@1.0.0",
  "dist": {
    "shasum": "726796830d32a01095c52448e48f3730105e2f18"
  },
  "_from": "paratask@",
  "_resolved": "https://registry.npmjs.org/paratask/-/paratask-0.1.4.tgz"
}
